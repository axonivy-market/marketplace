name: Docker Build

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:
    inputs:
      build_env:
        description: 'Build environment'
        required: true
        default: 'staging'

  workflow_call:
    inputs:
      build_env:
        description: 'Build environment'
        required: true
        type: string
      release_version:
        description: 'Release version'
        required: true
        type: string
        default: ''

env:
  BASE_WORKING_DIR: /home/axonivy/marketplace/work

jobs:
  cleanup:
    name: Clean up docker container and images
    runs-on: self-hosted

    steps:
      - name: Bring down and remove containers and images
        continue-on-error: true
        working-directory: ${{ env.BASE_WORKING_DIR }}
        run: |
          docker compose -f publish/docker-compose.yml down --rmi all
      - name: Delete old sources code
        working-directory: ${{ env.BASE_WORKING_DIR }}
        run: |
          echo "Clean up workspaces ${{ env.BASE_WORKING_DIR }}"
          rm -rf ./marketplace-ui/*
          rm -rf ./marketplace-service/*
          rm -rf ./publish/*
          rm -rf ./config/*

  build-and-deploy:
    name: Build and bring up docker containers
    runs-on: self-hosted
    needs: cleanup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version || github.ref }}

      - name: Copy resources to working directory
        run : |
          echo "Copy marketplace-ui to ${{ env.BASE_WORKING_DIR }} directory"
          cp -r marketplace-ui ${{ env.BASE_WORKING_DIR }}

          echo "Copy marketplace-service to ${{ env.BASE_WORKING_DIR }} directory"
          cp -r marketplace-service ${{ env.BASE_WORKING_DIR }}

          echo "Copy nginx configs to config directory"
          mkdir -p ${{ env.BASE_WORKING_DIR }}/config/nginx && cp -r marketplace-build/config/nginx/dev/* ${{ env.BASE_WORKING_DIR }}/config/nginx

          echo "Copy compose configs to publish directory"
          mkdir -p ${{ env.BASE_WORKING_DIR }}/publish && cp -r marketplace-build/.env ${{ env.BASE_WORKING_DIR }}/publish/.env
          cp -r marketplace-build/docker-compose.yml ${{ env.BASE_WORKING_DIR }}/publish/docker-compose.yml

      - name: Update environment variables for .env
        env:
          ENV_FILE: '${{ env.BASE_WORKING_DIR }}/publish/.env'
          GH_MARKET_BRANCH: ${{ secrets.MARKET_GITHUB_MARKET_BRANCH }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MARKET_JWT_SECRET_KEY: ${{ secrets.MARKET_JWT_SECRET_KEY }}
          MARKET_CORS_ALLOWED_ORIGIN: ${{ secrets.MARKET_CORS_ALLOWED_ORIGIN }}
          MARKET_CLICK_LIMIT: ${{ secrets.MARKET_CLICK_LIMIT }}
          MARKET_LIMITED_REQUEST_PATHS: ${{ secrets.MARKET_LIMITED_REQUEST_PATHS }}
          POSTGRES_HOST_URL: ${{ secrets.POSTGRES_HOST_URL }}
          POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          if [ "${{ inputs.build_env }}" == "production" ]; then
            OAUTH_APP_CLIENT_ID=${{ secrets.OAUTH_APP_CLIENT_ID }}
            OAUTH_APP_CLIENT_SECRET=${{ secrets.OAUTH_APP_CLIENT_SECRET }}
          else
            OAUTH_APP_CLIENT_ID=${{ secrets.OAUTH_APP_CLIENT_ID_STAGING }}
            OAUTH_APP_CLIENT_SECRET=${{ secrets.OAUTH_APP_CLIENT_SECRET_STAGING }}
          fi

          sed -i "s/^MARKET_GITHUB_MARKET_BRANCH=.*$/MARKET_GITHUB_MARKET_BRANCH=$GH_MARKET_BRANCH/" $ENV_FILE
          sed -i "s/^MARKET_GITHUB_TOKEN=.*$/MARKET_GITHUB_TOKEN=$GH_TOKEN/" $ENV_FILE
          sed -i "s/^MARKET_GITHUB_OAUTH_APP_CLIENT_ID=.*$/MARKET_GITHUB_OAUTH_APP_CLIENT_ID=$OAUTH_APP_CLIENT_ID/" $ENV_FILE
          sed -i "s/^MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=.*$/MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=$OAUTH_APP_CLIENT_SECRET/" $ENV_FILE
          sed -i "s/^MARKET_JWT_SECRET_KEY=.*$/MARKET_JWT_SECRET_KEY=$MARKET_JWT_SECRET_KEY/" $ENV_FILE
          sed -i "s/^MARKET_CORS_ALLOWED_ORIGIN=.*$/MARKET_CORS_ALLOWED_ORIGIN=$MARKET_CORS_ALLOWED_ORIGIN/" $ENV_FILE
          sed -i "s/^MARKET_CLICK_LIMIT=.*$/MARKET_CLICK_LIMIT=$MARKET_CLICK_LIMIT/" $ENV_FILE
          sed -i "s|^MARKET_LIMITED_REQUEST_PATHS=.*$|MARKET_LIMITED_REQUEST_PATHS=\"$MARKET_LIMITED_REQUEST_PATHS\"|" $ENV_FILE
          sed -i "s|^POSTGRES_HOST_URL=.*$|POSTGRES_HOST_URL=$POSTGRES_HOST_URL|" $ENV_FILE
          sed -i "s/^POSTGRES_USERNAME=.*$/POSTGRES_USERNAME=$POSTGRES_USERNAME/" $ENV_FILE
          sed -i "s/^POSTGRES_PASSWORD=.*$/POSTGRES_PASSWORD=$POSTGRES_PASSWORD/" $ENV_FILE

      - name: Update version
        if: ${{ inputs.release_version != '' }}
        continue-on-error: true
        env:
          POM_FILE: '${{ env.BASE_WORKING_DIR }}/marketplace-service/pom.xml'
          PACKAGE_FILE: '${{ env.BASE_WORKING_DIR }}/marketplace-ui/package.json'
        run: |
          xml ed -L -u "//_:project/_:version" -v "${{ inputs.release_version }}" $POM_FILE
          sed -i 's/"version": "[^"]*"/"version": "${{ inputs.release_version }}"/' $PACKAGE_FILE

      - name: Build and bring up containers without cache
        working-directory: ${{ env.BASE_WORKING_DIR }}/publish
        run: |
          if [ -n "${{ inputs.release_version }}" ]; then
            BUILD_VERSION="${{ inputs.release_version }}"
          else
            chmod +r ../marketplace-service/pom.xml
            BUILD_VERSION=$(xml sel -t -v "//_:project/_:version" ../marketplace-service/pom.xml)
          fi

          docker compose build --build-arg BUILD_ENV=${{ inputs.build_env }} --build-arg BUILD_VERSION=$BUILD_VERSION
          docker compose up --force-recreate -d
