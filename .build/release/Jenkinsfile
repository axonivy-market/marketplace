properties([
  parameters([
    [$class: 'GitParameterDefinition',
      name: 'BRANCH',
      type: 'PT_BRANCH',
      defaultValue: 'develop',
      description: 'Choose your GitHub branch',
      branchFilter: '.*',
      tagFilter: '*',
      sortMode: 'NONE',
      selectedValue: 'DEFAULT',
      quickFilterEnabled: true
    ]
  ])
])
pipeline {
  agent any
  environment {
    UI_IMAGE_NAME = 'marketplace-ui'
    SERVICE_IMAGE_NAME = 'marketplace-service'
  }
  parameters {
    string(name: 'release_version', defaultValue: 'latest', description: 'Release version')
  }
  stages {
    stage('Checkout Source') {
      steps {
        script {
          def gitBranch = params.BRANCH.replaceFirst(/^origin\//, '')
          git branch: gitBranch, url: env.MARKETPLACE_GIT_URL
          sh """
            ENV_FILE='${BASE_WORKING_DIR}/marketplace-build/.env'
            sed -i "s|^MARKET_GITHUB_MARKET_BRANCH=.*\$|MARKET_GITHUB_MARKET_BRANCH=${env.MARKET_GITHUB_MARKET_BRANCH}|" \$ENV_FILE
            sed -i "s|^MARKET_GITHUB_TOKEN=.*\$|MARKET_GITHUB_TOKEN=${env.GH_TOKEN}|" \$ENV_FILE
            sed -i "s|^MARKET_GITHUB_OAUTH_APP_CLIENT_ID=.*\$|MARKET_GITHUB_OAUTH_APP_CLIENT_ID=${env.OAUTH_APP_CLIENT_ID}|" \$ENV_FILE
            sed -i "s|^MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=.*\$|MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=${env.OAUTH_APP_CLIENT_SECRET}|" \$ENV_FILE
            sed -i "s|^MARKET_JWT_SECRET_KEY=.*\$|MARKET_JWT_SECRET_KEY=${env.MARKET_JWT_SECRET_KEY}|" \$ENV_FILE
            sed -i "s|^MARKET_CORS_ALLOWED_ORIGIN=.*\$|MARKET_CORS_ALLOWED_ORIGIN=${env.MARKET_CORS_ALLOWED_ORIGIN}|" \$ENV_FILE
            sed -i "s|^MARKET_CLICK_LIMIT=.*\$|MARKET_CLICK_LIMIT=${env.MARKET_CLICK_LIMIT}|" \$ENV_FILE
            sed -i "s|^MARKET_LIMITED_REQUEST_PATHS=.*\$|MARKET_LIMITED_REQUEST_PATHS=\\"${env.MARKET_LIMITED_REQUEST_PATHS}\\"|" \$ENV_FILE
            sed -i "s|^POSTGRES_HOST_URL=.*\$|POSTGRES_HOST_URL=${env.POSTGRES_HOST_URL}|" \$ENV_FILE
            sed -i "s|^POSTGRES_USERNAME=.*\$|POSTGRES_USERNAME=${env.POSTGRES_USERNAME}|" \$ENV_FILE
            sed -i "s|^POSTGRES_PASSWORD=.*\$|POSTGRES_PASSWORD=${env.POSTGRES_PASSWORD}|" \$ENV_FILE
          """
        }
      }
    }

    stage('Update Version and Tag Source') {
      steps {
        withEnv([
          "POM_FILE=./marketplace-service/pom.xml",
          "PACKAGE_FILE=./marketplace-ui/package.json"
        ]) {
          script {
            sh '''
              xml ed -L -u "//_:project/_:version" -v "$release_version" $POM_FILE
              sed -i 's/"version": \"[^\"]*\"/"version": \"$release_version\"/' $PACKAGE_FILE
              git push --delete origin $release_version || true
              git tag -d $release_version || true
              git commit -a -m "Update version to $release_version"
              git tag $release_version
              git push origin $release_version
            '''
          }
        }
      }
    }

    stage('Build Docker Images') {
      steps {
        script {
          dir("${env.BASE_WORKING_DIR}/marketplace-build") {
            sh """
              docker compose build --build-arg BUILD_ENV=production
              docker compose up --force-recreate -d
            """
          }
        }
      }
    }

    stage('Wait for Containers') {
      steps {
        dir('marketplace-build') {
          sh '''
            timeout=300
            start_time=$(date +%s)
            while [ $(($(date +%s) - start_time)) -lt $timeout ]; do
              if docker compose ps | grep -q "Up"; then
                echo "Containers are up and running."
                exit 0
              fi
              echo "Waiting for containers to start..."
              sleep 5
            done
            echo "Containers did not start within the timeout period."
            exit 1
          '''
        }
      }
    }

    stage('Log in to GitHub Container Registry') {
      steps {
        withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
          sh 'echo "$GITHUB_TOKEN" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin'
        }
      }
    }

    stage('Refine Release Version') {
      steps {
        script {
          env.VERSION = params.release_version == 'main' ? 'latest' : params.release_version
        }
      }
    }

    stage('Release Marketplace UI Image') {
      steps {
        sh '''
          UI_IMAGE_ID=ghcr.io/$GITHUB_REPOSITORY_OWNER/$UI_IMAGE_NAME
          docker tag $UI_IMAGE_NAME $UI_IMAGE_ID:$VERSION
          docker push $UI_IMAGE_ID:$VERSION
        '''
      }
    }

    stage('Release Marketplace Service Image') {
      steps {
        sh '''
          SERVICE_IMAGE_ID=ghcr.io/$GITHUB_REPOSITORY_OWNER/$SERVICE_IMAGE_NAME
          docker tag $SERVICE_IMAGE_NAME $SERVICE_IMAGE_ID:$VERSION
          docker push $SERVICE_IMAGE_ID:$VERSION
        '''
      }
    }
  }
}
