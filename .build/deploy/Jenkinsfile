properties([
  parameters([
    [$class: 'GitParameterDefinition',
      name: 'BRANCH',
      type: 'PT_BRANCH',
      defaultValue: 'origin/develop',
      description: 'Choose your GitHub branch',
      branchFilter: '.*',
      tagFilter: '*',
      sortMode: 'NONE',
      selectedValue: 'DEFAULT',
      quickFilterEnabled: true
    ]
  ])
])
pipeline {
    agent any
    options {
        ansiColor('xterm')
    }

    environment {
        NGINX_CONFIG_PATH= './config/nginx/dev/nginx.conf'
        MARKETPLACE_GIT_URL = credentials('MARKETPLACE_GIT_URL')
        MARKET_GITHUB_MARKET_BRANCH = credentials('MARKET_GITHUB_MARKET_BRANCH')
        GH_TOKEN = credentials('GH_TOKEN')
        MARKET_JWT_SECRET_KEY = credentials('MARKET_JWT_SECRET_KEY')
        MARKET_CORS_ALLOWED_ORIGIN = credentials('MARKET_CORS_ALLOWED_ORIGIN')
        MARKET_CLICK_LIMIT = credentials('MARKET_CLICK_LIMIT')
        MARKET_LIMITED_REQUEST_PATHS = credentials('MARKET_LIMITED_REQUEST_PATHS')
        POSTGRES_HOST_URL = credentials('POSTGRES_HOST_URL')
        POSTGRES_USERNAME = credentials('POSTGRES_USERNAME')
        POSTGRES_PASSWORD = credentials('POSTGRES_PASSWORD')
        OAUTH_APP_CLIENT_ID = credentials('OAUTH_APP_CLIENT_ID_STAGING')
        OAUTH_APP_CLIENT_SECRET = credentials('OAUTH_APP_CLIENT_SECRET_STAGING')
        ALLOW_URLS = credentials("ALLOW_URLS")
    }

    stages {

        stage('Set Display Name') {
            steps {
                script {
                def userId = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId
                def fullName = "system"
                if (userId) {
                    def user = jenkins.model.Jenkins.instance.getUser(userId)
                    fullName = user?.getDisplayName() ?: userId
                }
                currentBuild.displayName = "Build #${env.BUILD_NUMBER} on branch ${BRANCH} - trigger by ${fullName}"
                }
            }
        }

        stage('Stop running docker container for compose file') {
            steps {
                script {
                    try {
                        sh 'docker compose -f marketplace-build/docker-compose.yml down --rmi all'
                    } catch (Exception e) {
                        echo "Error during docker compose down, continuing: ${e}"
                    }
                }
                cleanWs()
            }
        }

        stage('Build and Deploy') {
            steps {
                script {
                    def gitBranch = params.BRANCH.replaceFirst(/^origin\//, '')
                    git branch: gitBranch, url: env.MARKETPLACE_GIT_URL
                    sh """
                        ENV_FILE='./marketplace-build/.env'
                        sed -i "s|^MARKET_GITHUB_MARKET_BRANCH=.*\$|MARKET_GITHUB_MARKET_BRANCH=${env.MARKET_GITHUB_MARKET_BRANCH}|" \$ENV_FILE
                        sed -i "s|^MARKET_GITHUB_TOKEN=.*\$|MARKET_GITHUB_TOKEN=${env.GH_TOKEN}|" \$ENV_FILE
                        sed -i "s|^MARKET_GITHUB_OAUTH_APP_CLIENT_ID=.*\$|MARKET_GITHUB_OAUTH_APP_CLIENT_ID=${env.OAUTH_APP_CLIENT_ID}|" \$ENV_FILE
                        sed -i "s|^MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=.*\$|MARKET_GITHUB_OAUTH_APP_CLIENT_SECRET=${env.OAUTH_APP_CLIENT_SECRET}|" \$ENV_FILE
                        sed -i "s|^MARKET_JWT_SECRET_KEY=.*\$|MARKET_JWT_SECRET_KEY=${env.MARKET_JWT_SECRET_KEY}|" \$ENV_FILE
                        sed -i "s|^MARKET_CORS_ALLOWED_ORIGIN=.*\$|MARKET_CORS_ALLOWED_ORIGIN=${env.MARKET_CORS_ALLOWED_ORIGIN}|" \$ENV_FILE
                        sed -i "s|^MARKET_CLICK_LIMIT=.*\$|MARKET_CLICK_LIMIT=${env.MARKET_CLICK_LIMIT}|" \$ENV_FILE
                        sed -i "s|^MARKET_LIMITED_REQUEST_PATHS=.*\$|MARKET_LIMITED_REQUEST_PATHS=\\"${env.MARKET_LIMITED_REQUEST_PATHS}\\"|" \$ENV_FILE
                        sed -i "s|^POSTGRES_HOST_URL=.*\$|POSTGRES_HOST_URL=${env.POSTGRES_HOST_URL}|" \$ENV_FILE
                        sed -i "s|^POSTGRES_USERNAME=.*\$|POSTGRES_USERNAME=${env.POSTGRES_USERNAME}|" \$ENV_FILE
                        sed -i "s|^POSTGRES_PASSWORD=.*\$|POSTGRES_PASSWORD=${env.POSTGRES_PASSWORD}|" \$ENV_FILE
                    """
                }
            }
        }
        stage('Build and Deploy Containers') {
            steps {
                script {
                    dir("./marketplace-build") {
                        sh """
                            docker compose build --build-arg BUILD_ENV=staging --build-arg NGINX_CONFIG_PATH=$NGINX_CONFIG_PATH
                            docker compose up --force-recreate -d
                        """
                    }
                }
            }
        }
    }
}